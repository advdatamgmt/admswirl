- Class: meta
  Course: MSCR596 - Advanced Data Management in R
  Lesson: Rcel, Part 2
  Author: Beau B. Bruce
  Type: Standard
  Organization: Emory University
  Version: 2.4.3

- Class: text
  Output: |-
    In the first part of this exercise we learned about vector and factor which
    are two building blocks of a data.frame. As you recall, a vector requires
    that each element (of the resulting vector) be of the same atomic data type.

    Now, we meet the first composite data type that can contain multiple atomic
    types as elements simultaneously: list. A specialized list called data.frame
    will be used to store our datasets and will allow us to operate on our
    datasets as spreadsheet-like objects.

- Class: cmd_question
  Output: |-
    Starting with lists, a list allows you to mix ‘n’ match atomic data types.
    You bulid a list with the function list(), like this:

    l <- list("A", 2, TRUE)

    See the subtle difference between l ("ell") and 1 ("one").
    Notice that there is also a difference between O ("oh") and 0 ("zero").
    This is important so keep an eye out for it in this lesson.

    Try that expression above now.
  CorrectAnswer: l <- list("A", 2, TRUE)
  AnswerTests: omnitest(correctExpr = 'l <- list("A", 2, TRUE)')
  Hint: |-
    Type l <- list("A", 2, TRUE).

- Class: cmd_question
  Output: |-
    To extract an element in a list we use double square brackets. So,

    l[[1]]

    Will extract the first element of l.  Try it now.
  CorrectAnswer: l[[1]]
  AnswerTests: omnitest(correctExpr = 'l[[1]]')
  Hint: |-
    Type l[[1]]

- Class: cmd_question
  Output: |-
    Now test if the first element of l really is a character still.
  CorrectAnswer: is.character(l[[1]])
  AnswerTests: omnitest(correctExpr = 'is.character(l[[1]])')
  Hint: |-
    Use is.character, l, and [[1]] somehow.

- Class: cmd_question
  Output: |-
    Now test if the second element of l really is numeric.
  CorrectAnswer: is.numeric(l[[2]])
  AnswerTests: omnitest(correctExpr = 'is.numeric(l[[2]])')
  Hint: |-
    Use is.numeric, l, and [[2]] somehow.

- Class: cmd_question
  Output: |-
    Now check the third element of l really is logical.
  CorrectAnswer: is.logical(l[[3]])
  AnswerTests: omnitest(correctExpr = 'is.logical(l[[3]])')
  Hint: |-
    Use is.logical, l, and [[3]] somehow.

- Class: cmd_question
  Output: |-
    Finally, what function do you think checks if something really is a list?
    Try it now on l.
  CorrectAnswer: is.list(l)
  AnswerTests: omnitest(correctExpr = 'is.list(l)')
  Hint: |-
    is.list?

- Class: cmd_question
  Output: |-
    Each element does not have to be a single atomic value.  You can use
    longer vectors.  Reassign l to be:

    list("A", c(1,3,2,4), TRUE)
  CorrectAnswer: l <- list("A", c(1,3,2,4), TRUE)
  AnswerTests: omnitest(correctExpr = 'l <- list("A", c(1,3,2,4), TRUE)')
  Hint: |-
    Type l <- list("A", c(1,3,2,4), TRUE)

- Class: cmd_question
  Output: |-
    Now examine the value of l and notice how R gives you hints about how
    to access the elements.
  CorrectAnswer: l
  AnswerTests: omnitest(correctExpr = 'l')
  Hint: |-
    Nothing more than just typing l ("ell").

- Class: cmd_question
  Output: |-
    Now examine the second element of l.
  CorrectAnswer: l[[2]]
  AnswerTests: omnitest(correctExpr = 'l[[2]]')
  Hint: |-
    Don't forget the double bracket!

- Class: cmd_question
  Output: |-
    You can also name the elements in a list like this:

    l2 <- list(a = "A", b = c(1, 3, 2, 4), c = TRUE)
  CorrectAnswer: l2 <- list(a = "A", b = c(1, 3, 2, 4), c = TRUE)
  AnswerTests: omnitest(correctExpr = 'l2 <- list(a = "A", b = c(1, 3, 2, 4), c = TRUE)')
  Hint: |-
    Type l2 <- list(a = "A", b = c(1, 3, 2, 4), c = TRUE)

- Class: cmd_question
  Output: |-
    Now examine the value of l2
    and notice how R gives you hints about how
    to access the elements.
  CorrectAnswer: l2
  AnswerTests: omnitest(correctExpr = 'l2')
  Hint: |-
    Type l2, that is ell two (l2) not twelve (12)

- Class: cmd_question
  Output: |-
    So, those hints tell you to use a dollar sign to access the element
    by name.  Like this:

    l2$c

    Try it now.
  CorrectAnswer: l2$c
  AnswerTests: omnitest(correctExpr = 'l2$c')
  Hint: |-
    Type l2$c

- Class: cmd_question
  Output: |-
    With a vector you can assign to a specific element.  Let's create a vector
    to try this with.  Type:

    x <- c(1, 3, 2, 4)
  CorrectAnswer: x <- c(1, 3, 2, 4)
  AnswerTests: omnitest(correctExpr = 'x <- c(1, 3, 2, 4)')
  Hint: |-
    Type x <- c(1, 3, 2, 4)

- Class: cmd_question
  Output: |-
    If we wanted to reassign the second element to be 100, all we'd have to do
    is probably what you'd think to do:

    x[2] <- 100
  CorrectAnswer: x[2] <- 100
  AnswerTests: omnitest(correctExpr = 'x[2] <- 100')
  Hint: |-
    Type x[2] <- 100

- Class: cmd_question
  Output: |-
    Now examine x to check the result.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr = 'x')
  Hint: |-
    Type x

- Class: cmd_question
  Output: |-
    Now, change the third element to 5.
  CorrectAnswer: x[3] <- 5
  AnswerTests: omnitest(correctExpr = 'x[3] <- 5')
  Hint: |-
    Type x[3] <- 5


- Class: cmd_question
  Output: |-
    You can also assign to parts of a list.  Let's remember what l looks like
    first.
    Type l.
  CorrectAnswer: l
  AnswerTests: omnitest(correctExpr = 'l')
  Hint: |-
    Type l ("ell")

- Class: cmd_question
  Output: |-
    So if I wanted to assign to the 3rd element of the vector that is the
    2nd element of l, what would one do?  Start by telling me what the
    second element of l is?
  CorrectAnswer: l[[2]]
  AnswerTests: omnitest(correctExpr = 'l[[2]]')
  Hint: |-
    Type l[[2]] (don't forget the double brackets)

- Class: cmd_question
  Output: |-
    So l[[2]] is a vector.  I want the third element.  I use single square
    brackets to get an element.  If I tell you that you can treat l[[2]]
    just like the name for that vector what would you type to get the third
    element?
  CorrectAnswer: l[[2]][3]
  AnswerTests: omnitest(correctExpr = 'l[[2]][3]')
  Hint: |-
    This might be tricky so I'm going to give you the answer if you didn't get
    it: l[[2]][3].  We'll talk more about this in class.

- Class: cmd_question
  Output: |-
    We now have access to l[[2]][3]. Let's change it to 42. Go for it!
  CorrectAnswer: l[[2]][3] <- 42
  AnswerTests: omnitest(correctExpr = 'l[[2]][3] <- 42')
  Hint: |-
    Use l[[2]][3], the assignment operator (<-), and 42.

- Class: cmd_question
  Output: |-
    Now, to the last major data type that we are going to learn about in this
    course, the data.frame. A data.frame is a specialized list where all the
    elements of the list have equal length. It is perfect for representing
    data where there are several values (in columns) per observation (in rows).
    You create a data.frame with the data.frame() function (are you suprised?).

    This one is a little long so you'll have to type carefully:

    df <- data.frame(age = c(3, 2, 3, 3, 1, 2, 4, 4),
      sex = factor(c("m", "f", "m", "f", "m", "f", "m", "f")),
      sorethroat = factor(c("no", "no", "no", "no", "yes", "yes", "yes", "yes")))
  CorrectAnswer: df <- data.frame(age = c(3, 2, 3, 3, 1, 2, 4, 4),
      sex = factor(c("m", "f", "m", "f", "m", "f", "m", "f")),
      sorethroat = factor(c("no", "no", "no", "no", "yes", "yes", "yes", "yes")))
  AnswerTests: omnitest(correctExpr = 'df <- data.frame(age = c(3, 2, 3, 3, 1, 2, 4, 4), sex = factor(c("m", "f", "m", "f", "m", "f", "m", "f")), sorethroat = factor(c("no", "no", "no", "no", "yes", "yes", "yes", "yes")))')
  Hint: |-
    Just type it out carefully.  I know it is a pain, but it will make you
    appreciate the other ways we will create these in the future!

- Class: cmd_question
  Output: |-
    Now type df to take a look at your new data.frame!
  CorrectAnswer: df
  AnswerTests: omnitest(correctExpr = 'df')
  Hint: |-
    Type df

- Class: cmd_question
  Output: |-
    OK, do you remember how to access the element of a list by name?
    The $ right?  So how could you get just the age element out of df?
  CorrectAnswer: df$age
  AnswerTests: omnitest(correctExpr = 'df$age')
  Hint: |-
    Does df$age make sense?

- Class: cmd_question
  Output: |-
    You can also use summary on data.frames try it now on df.
  CorrectAnswer: summary(df)
  AnswerTests: omnitest(correctExpr = 'summary(df)')
  Hint: |-
    Does summary(df) make sense?

- Class: cmd_question
  Output: |-
    In general, we will usually import a data.frame from an external file,
    like an Excel spreadsheet, but there are times when you want to build a
    data.frame from scratch, especially as you attempt to restructure data, so
    it is good to know how.

    You can check what variables are in a data.frame like this (it also works
    for a list):

    names(df)

    try it now.
  CorrectAnswer: names(df)
  AnswerTests: omnitest(correctExpr = 'names(df)')
  Hint: |-
    Type names(df)


- Class: cmd_question
  Output: |-
    There are several ways to access elements in a data.frame and each will
    be useful somewhere as we get better at programming.  We can access a single
    value by row and column.

    Rows first, columns second.
    This is the usual convention in mathematics and programming.  Try:

    df[2, 3]

    and compare your response to the output you got for the whole data.frame
    earlier.
  CorrectAnswer: df[2, 3]
  AnswerTests: omnitest(correctExpr = 'df[2, 3]')
  Hint: |-
    Type df[2, 3]

- Class: cmd_question
  Output: |-
    If we leave out the column specification, you get the whole row:

    df[2, ]

    will print the entire second row.  Try it.
  CorrectAnswer: df[2, ]
  AnswerTests: omnitest(correctExpr = 'df[2, ]')
  Hint: |-
    Type df[2, ]

- Class: cmd_question
  Output: |-
    If we leave out the row specification, you get the whole column:

    df[, 3]

    will print the entire third column.  Try it.
  CorrectAnswer: df[, 3]
  AnswerTests: omnitest(correctExpr = 'df[, 3]')
  Hint: |-
    Type df[, 3]

- Class: cmd_question
  Output: |-
    You can also use the column name instead of the index when you are accessing
    elements or columns.  An example would be:

    df[, "sorethroat"]

    Try it.
  CorrectAnswer: df[, "sorethroat"]
  AnswerTests: omnitest(correctExpr = 'df[, "sorethroat"]')
  Hint: |-
    Type df[, "sorethroat"]

- Class: cmd_question
  Output: |-
    Finally, you can use the subset command to find rows that match
    certain criteria.  Try:

    subset(df, age == 2)

    to find the observations where the age of the subject is 2.
  CorrectAnswer: subset(df, age == 2)
  AnswerTests: omnitest(correctExpr = 'subset(df, age == 2)')
  Hint: |-
    Type subset(df, age == 2)

- Class: cmd_question
  Output: |-
    Now try to combine your knowledge of the &, |, and ! operators (you may only
    need one of those) to find those subjects who are both age 2 and have a
    sorethroat using the subset function.
  CorrectAnswer: subset(df, age == 2 & sorethroat == "yes")
  AnswerTests: omnitest(correctExpr = 'subset(df, age == 2 & sorethroat == "yes")')
  Hint: |-
    The wording implies and (&) and don't forget the quotes around yes for
    sorethroat because you are accessing by a character not a name.

- Class: cmd_question
  Output: |-
    What comes out of the subset function is a data.frame that you can further
    subset using the operators you already know.  For example, try:

    subset(df, sorethroat == "yes")$age

    These types of access are important because when you are programming you
    want the computer to do the work of finding the specific values or data
    you need to do the computation you need to get the answer.  I sometimes say
    you want to avoid using your eyeballs to look things up.  Get the computer
    to tell you what you want to know!
  CorrectAnswer: subset(df, sorethroat == "yes")$age
  AnswerTests: omnitest(correctExpr = 'subset(df, sorethroat == "yes")$age')
  Hint: |-
    subset(df, sorethroat == "yes")$age

- Class: cmd_question
  Output: |-
    And we can apply functions to that like summary:

    summary(subset(df, sorethroat == "yes")$age)

    Try it.
  CorrectAnswer: summary(subset(df, sorethroat == "yes")$age)
  AnswerTests: omnitest(correctExpr = 'summary(subset(df, sorethroat == "yes")$age)')
  Hint: |-
    summary(subset(df, sorethroat == "yes")$age)

- Class: cmd_question
  Output: |-
    R has a lot of built in data.frames.  One we'll use a lot in this course
    is the esoph dataset.  You load it with data(esoph).  Do that now.
  CorrectAnswer: data(esoph)
  AnswerTests: omnitest(correctExpr = 'data(esoph)')
  Hint: |-
    data(esoph)

- Class: cmd_question
  Output: |-
    Now that it is loaded (under the name esoph) use summary to examine it.
  CorrectAnswer: summary(esoph)
  AnswerTests: omnitest(correctExpr = 'summary(esoph)')
  Hint: |-
    summary(esoph)

- Class: cmd_question
  Output: |-
    Extract its 4th row.
  CorrectAnswer: esoph[4, ]
  AnswerTests: omnitest(correctExpr = 'esoph[4, ]')
  Hint: |-
    esoph[4, ]

- Class: cmd_question
  Output: |-
    List the variable names of esoph.
  CorrectAnswer: names(esoph)
  AnswerTests: omnitest(correctExpr = 'names(esoph)')
  Hint: |-
    names(esoph)

- Class: cmd_question
  Output: |-
    esoph is in a case-control format where each row represents multiple cases
    and controls, in variables named ncases and ncontrols. So, if you are asked
    how many observations there are you’d add the number of cases and controls.

    So, write code that will give the number of cases which have tobacco
    consumption (tobgp) of 30+ gm/day? You’ll find the function sum helpful,
    which takes a vector and adds it up.  You'll use it in a pattern just like
    you did with summary above on a subset.
  CorrectAnswer: sum(subset(esoph, tobgp == "30+")$ncases)
  AnswerTests: omnitest(correctVal = sum(subset(esoph, tobgp == "30+")$ncases));expr_uses_func('subset')
  Hint: |-
    subset(esoph, tobgp == "30+") is the kernel of what you need.  Then, that is
    a little data.frame from which you need the variable ncases and you then
    need to add it up - how do you put it all together?

- Class: cmd_question
  Output: |-
    OK, here is your most challenging problem yet.

    What is the number of observations (ncases + ncontrols)
    where both the age group (agegp) is 25-34
    years and tobacco consumption is 10-19 gm/day?

    There are many possible ways to do it, but you need to write the code that
    will give you the answer without doing it by hand.
  CorrectAnswer: sum(subset(esoph, agegp == "25-34" & tobgp == "10-19")[, c("ncases", "ncontrols")])
  AnswerTests: omnitest(correctVal = sum(subset(esoph, agegp == "25-34" & tobgp == "10-19")[, c("ncases", "ncontrols")]));expr_uses_func('subset')
  Hint: |-
    Don't overthink it.  It is a straightforward extension of the last problem.
    Calculate each of the two pieces separately even though it requires
    repetition and simply add them together with + is one solution.

- Class: mult_question
  Output: Respond Yes to submit your assignment to Canvas.
  AnswerChoices: Yes;Yes
  CorrectAnswer: Yes
  AnswerTests: submit_log(981615)
  Hint: Respond Yes.

- Class: text
  Output: |-
    Check to see that your submission was successful and there are no errors
    above. If your submission failed to
    submit automatically for any reason, please follow the instructions above.
    Ready for more?
