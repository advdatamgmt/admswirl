- Class: meta
  Course: MSCR596 - Advanced Data Management in R
  Lesson: Food Prep - Slice, Dice, Concatenate, Merge, Sort
  Author: Beau B. Bruce
  Type: Standard
  Organization: Emory University
  Version: 2.4.3

- Class: text
  Output: |-
    This module focuses on several common data manipulation tasks: selecting,
    subsetting, concatinating, merging, and sorting. Some you have already
    seen before, but this is a good time for review and reinforcement. For
    example, when you want to select a part of a vector use square brackets, [],
    placing between them a numeric vector that lists the elements you want to
    extract.

- Class: cmd_question
  Output: |-
    R has a builtin vector that contains the capital letters: LETTERS.
    Letâ€™s try a few of things with that vector.  First just type, LETTERS
    to see what is inside.
  CorrectAnswer: LETTERS
  AnswerTests: omnitest(correctExpr = 'LETTERS')

- Class: cmd_question
  Output: |-
    So, how would use the square brackets to get the 10th letter?
  CorrectAnswer: LETTERS[10]
  AnswerTests: omnitest(correctExpr = 'LETTERS[10]')

- Class: cmd_question
  Output: |-
    How about selecting the 15th through the 22nd letters?  Don't forget about
    the : operator...
  CorrectAnswer: LETTERS[15:22]
  AnswerTests: omnitest(correctExpr = 'LETTERS[15:22]')
  Hint: '15:22 is a part of the answer'

- Class: cmd_question
  Output: |-
    If I wanted the odd letters, I could do this:

    LETTERS[c(1,3,5,7,9,11,13,15,17,19,21,23,25)]

    But that's a lot of work.  Anytime you see something like this in your code
    you should try to figure out a way to do it more automatically.  There is a
    function called seq that creates sequences of numbers.

    Type:

    seq(1, 26, by = 2)

    to see what it does.  Look at help for seq too.
  CorrectAnswer: seq(1, 26, by = 2)
  AnswerTests: omnitest(correctExpr = 'seq(1, 26, by = 2)')

- Class: cmd_question
  Output: |-
    Now use seq to get the odd letters from LETTERS.
  CorrectAnswer: LETTERS[seq(1, 26, by = 2)]
  AnswerTests: omnitest(correctExpr = 'LETTERS[seq(1, 26, by = 2)]')
  Hint: Does LETTERS[seq(...)] as a suggestion help?

- Class: cmd_question
  Output: |-
    Now get the even letters from LETTERS also using seq.
  CorrectAnswer: LETTERS[seq(2, 26, by = 2)]
  AnswerTests: omnitest(correctExpr = 'LETTERS[seq(2, 26, by = 2)]')
  Hint: With what number should you start?

- Class: cmd_question
  Output: |-
    Another good function: rep. It is technically a mnemonic for
    "replicate" but I typically remember it as "repeat".  Try

    rep(5, 10)

    and take a peek at the help for it too.
  CorrectAnswer: rep(5, 10)
  AnswerTests: omnitest(correctExpr = 'rep(5, 10)')

- Class: cmd_question
  Output: |-
    Let's see more about the flexibility of rep.  Here are some
    examples - type each one:

    rep(c(1, 2), 5)
  CorrectAnswer: rep(c(1, 2), 5)
  AnswerTests: omnitest(correctExpr = 'rep(c(1, 2), 5)')

- Class: cmd_question
  Output: |-
    Next try:

    rep(c(1, 2), each = 5)
  CorrectAnswer: rep(c(1, 2), each = 5)
  AnswerTests: omnitest(correctExpr = 'rep(c(1, 2), each = 5)')

- Class: cmd_question
  Output: |-
    Next try:

    rep(1:3, 3:1)
  CorrectAnswer: rep(1:3, 3:1)
  AnswerTests: omnitest(correctExpr = 'rep(1:3, 3:1)')

- Class: cmd_question
  Output: |-
    And there is nothing to stop you from getting the same element of a vector
    more than once - try:

    LETTERS[rep(1:3, 3:1)]
  CorrectAnswer: LETTERS[rep(1:3, 3:1)]
  AnswerTests: omnitest(correctExpr = 'LETTERS[rep(1:3, 3:1)]')

- Class: cmd_question
  Output: |-
    Want to get rid of something? Use negative numbers:

    LETTERS[-26:-21]
  CorrectAnswer: LETTERS[-26:-21]
  AnswerTests: omnitest(correctExpr = 'LETTERS[-26:-21]')

- Class: cmd_question
  Output: |-
    So this is another way to get the even numbers!

    LETTERS[-seq(1, 26, by = 2)]
  CorrectAnswer: LETTERS[-seq(1, 26, by = 2)]
  AnswerTests: omnitest(correctExpr = 'LETTERS[-seq(1, 26, by = 2)]')

- Class: cmd_question
  Output: |-
    Remember that R returns the true values when you use a logical vector.
    The vector n5 contains c(1, 2, 3, 4, 5).  See what you get when you
    type:

    n5[c(TRUE, FALSE, TRUE, TRUE, FALSE)]
  CorrectAnswer: n5[c(TRUE, FALSE, TRUE, TRUE, FALSE)]
  AnswerTests: omnitest(correctExpr = 'n5[c(TRUE, FALSE, TRUE, TRUE, FALSE)]')

- Class: cmd_question
  Output: |-
    Because R "recycles" a vector used for subsetting until the length is the
    same as the longer vector (remember that from our early lessons?) you can
    get the even letters this way!

    LETTERS[c(FALSE, TRUE)]
  CorrectAnswer: LETTERS[c(FALSE, TRUE)]
  AnswerTests: omnitest(correctExpr = 'LETTERS[c(FALSE, TRUE)]')

- Class: cmd_question
  Output: |-
    Now use the same technique for the odd letters!
  CorrectAnswer: LETTERS[c(TRUE, FALSE)]
  AnswerTests: omnitest(correctExpr = 'LETTERS[c(TRUE, FALSE)]')

- Class: cmd_question
  Output: |-
    The vector letsamp contains a vector of 100 random letters.  Type
    letsamp to take a look at it.
  CorrectAnswer: letsamp
  AnswerTests: omnitest(correctExpr = 'letsamp')

- Class: cmd_question
  Output: |-
    Use == to test which letters are P.
  CorrectAnswer: letsamp == "P"
  AnswerTests: omnitest(correctExpr = 'letsamp == "P"')
  Hint: Did you remember the quotes around "P"?

- Class: cmd_question
  Output: |-
    Because R treats TRUE == 1 when a logical vector is converted to a
    numeric vector you can use the sum function to count the P's like this:

    sum(letsamp == "P")
  CorrectAnswer: sum(letsamp == "P")
  AnswerTests: omnitest(correctExpr = 'sum(letsamp == "P")')

- Class: cmd_question
  Output: |-
    A very useful operator is the %in% operator which tests if something is
    "in" the vector.  Like this:

    letsamp[letsamp %in% c("P", "Q")]

    You'll find it only returns the P's and Q's.
  CorrectAnswer: letsamp[letsamp %in% c("P", "Q")]
  AnswerTests: omnitest(correctExpr = 'letsamp[letsamp %in% c("P", "Q")]')

- Class: cmd_question
  Output: |-
    Finally don't forget that you can use c to concatenate multiple vectors
    together in very flexible ways.  Try:

    c(LETTERS[1:3], c("H", "I"), letsamp[letsamp %in% c("P", "Q")])
  CorrectAnswer: c(LETTERS[1:3], c("H", "I"), letsamp[letsamp %in% c("P", "Q")])
  AnswerTests: omnitest(correctExpr = 'c(LETTERS[1:3], c("H", "I"), letsamp[letsamp %in% c("P", "Q")])')

- Class: cmd_question
  Output: |-
    Ok, let's turn to data.frames.  I have a few loaded already for you.
    The first is called cholera_merge.  Let's look at its first 6 rows:

    cholera_merge[1:6, ]
  CorrectAnswer: cholera_merge[1:6, ]
  AnswerTests: omnitest(correctExpr = 'cholera_merge[1:6, ]')

- Class: cmd_question
  Output: |-
    Use a logical to get certain rows:

    cholera_merge[cholera_merge$area == 4, ]
  CorrectAnswer: cholera_merge[cholera_merge$area == 4, ]
  AnswerTests: omnitest(correctExpr = 'cholera_merge[cholera_merge$area == 4, ]')

- Class: cmd_question
  Output: |-
    You can use subset to seemingly do the same thing:

    subset(cholera_merge, area == 4)
  CorrectAnswer: subset(cholera_merge, area == 4)
  AnswerTests: omnitest(correctExpr = 'subset(cholera_merge, area == 4)')

- Class: cmd_question
  Output: |-
    However you will run into a problem if you try to do something like:

    subset(cholera_merge, area == 4)$area <- 6

    It won't work.  So don't type it.  Instead, you have to do this:

    cholera_merge[cholera_merge$area == 4, ]$area <- 6
  CorrectAnswer: cholera_merge[cholera_merge$area == 4, ]$area <- 6
  AnswerTests: omnitest(correctExpr = 'cholera_merge[cholera_merge$area == 4, ]$area <- 6')

- Class: cmd_question
  Output: |-
    Verify that all the area 4 are now area 6...

    subset(cholera_merge, area == 4)
  CorrectAnswer: subset(cholera_merge, area == 4)
  AnswerTests: omnitest(correctExpr = 'subset(cholera_merge, area == 4)')

- Class: cmd_question
  Output: |-
    ... and ...

    subset(cholera_merge, area == 6)
  CorrectAnswer: subset(cholera_merge, area == 6)
  AnswerTests: omnitest(correctExpr = 'subset(cholera_merge, area == 6)')

- Class: cmd_question
  Output: |-
    Appears it worked.  Now it is your turn to put it back the way it was
    using the pattern of test and assignment I showed you above.
  CorrectAnswer: cholera_merge[cholera_merge$area == 6, ]$area <- 4
  AnswerTests: omnitest(correctExpr = 'cholera_merge[cholera_merge$area == 6, ]$area <- 4')

- Class: cmd_question
  Output: |-
    You can combine multiple conditions using & and |, for example, try:

    cholera_merge[cholera_merge$sex == "F" & cholera_merge$area == 3, ]
  CorrectAnswer: cholera_merge[cholera_merge$sex == "F" & cholera_merge$area == 3, ]
  AnswerTests: omnitest(correctExpr = 'cholera_merge[cholera_merge$sex == "F" & cholera_merge$area == 3, ]')

- Class: cmd_question
  Output: |-
    Columns work the same as rows (I used both together to keep the output
    short). Try:

    cholera_merge[1:3, 3:4]
  CorrectAnswer: cholera_merge[1:3, 3:4]
  AnswerTests: omnitest(correctExpr = 'cholera_merge[1:3, 3:4]')

- Class: cmd_question
  Output: |-
    Another example:

    cholera_merge[1:3, c("age", "sex")]
  CorrectAnswer: cholera_merge[1:3, c("age", "sex")]
  AnswerTests: omnitest(correctExpr = 'cholera_merge[1:3, c("age", "sex")]')

- Class: cmd_question
  Output: |-
    And another:

    cholera_merge[cholera_merge$area == 4, c("age", "sex")]
  CorrectAnswer: cholera_merge[cholera_merge$area == 4, c("age", "sex")]
  AnswerTests: omnitest(correctExpr = 'cholera_merge[cholera_merge$area == 4, c("age", "sex")]')

- Class: cmd_question
  Output: |-
    The function paste0 pastes together character vectors
    without any space between them.  It'll come in handy in a moment.  Try it:

    paste0("a", "b", "c")
  CorrectAnswer: paste0("a", "b", "c")
  AnswerTests: omnitest(correctExpr = 'paste0("a", "b", "c")')
  Hint: It is 0 (zero) not O (oh)

- Class: cmd_question
  Output: |-
    Works with vectors too:

    paste0("cholera", 1:5)
  CorrectAnswer: paste0("cholera", 1:5)
  AnswerTests: omnitest(correctExpr = 'paste0("cholera", 1:5)')

- Class: cmd_question
  Output: |-
    Another useful function is assign that has the same effect
    as <- but works as a function with a character vector.  It allows us
    to programmatically specify the name using a character vector which is
    very helpful.  Try:

    assign("x", 1:3)
  CorrectAnswer: assign("x", 1:3)
  AnswerTests: omnitest(correctExpr = 'assign("x", 1:3)')

- Class: cmd_question
  Output: |-
    Check that x is what you think it should be.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr = 'x')


- Class: script
  Output: |-
    Letâ€™s divide up cholera_merge into smaller datasets by area.  With
    assign and paste0 and the subset methods we've been studying we can do it
    with a loop like above.  Study it carefully and then submit().
  AnswerTests: test_any_function()
  Script: break.R

- Class: cmd_question
  Output: |-
    Now there are five datasets named cholera1, cholera2, ..., each containing
    one area's data.  You can use rbind to put it back together:

    c_m <- rbind(cholera1, cholera2, cholera3, cholera4, cholera5)

    [There is a better way to do this if you have lots of datasets, but it is
    tricky to understand at first and we should wait until later to try it.]
  CorrectAnswer: c_m <- rbind(cholera1, cholera2, cholera3, cholera4, cholera5)
  AnswerTests: omnitest(correctExpr = 'c_m <- rbind(cholera1, cholera2, cholera3, cholera4, cholera5)')

- Class: cmd_question
  Output: |-
    Check it is put back together with head(c_m).
  CorrectAnswer: head(c_m)
  AnswerTests: omnitest(correctExpr = 'head(c_m)')

- Class: cmd_question
  Output: |-
    NROW tells you how many rows a dataset has.  Does c_m have the same
    number as cholera_merge?

    NROW(c_m) == NROW(cholera_merge)
  CorrectAnswer: NROW(c_m) == NROW(cholera_merge)
  AnswerTests: omnitest(correctExpr = 'NROW(c_m) == NROW(cholera_merge)')

- Class: cmd_question
  Output: |-
    Looks good.  Now let's say we wanted our data in a different format.
    Try this:

    (threecho <- cbind(cholera1, cholera2, cholera3))

    Remember the extra set of parentheses just shows the result.
  CorrectAnswer: threecho <- cbind(cholera1, cholera2, cholera3)
  AnswerTests: omnitest(correctExpr = '(threecho <- cbind(cholera1, cholera2, cholera3))')

- Class: cmd_question
  Output: |-
    See a potential problem?  The names of the columns are not unique.
    That's going to be an issue if you try to do some of the things we talked
    about because R won't know which one you want.  You can examine the names
    of a dataset like this:

    names(threecho)
  CorrectAnswer: names(threecho)
  AnswerTests: omnitest(correctExpr = 'names(threecho)')

- Class: cmd_question
  Output: |-
    And you can change them with an assignment like this:

    names(threecho) <- paste0(c("area", "subject", "age", "sex"), rep(1:3, each = 4))
  CorrectAnswer: names(threecho) <- paste0(c("area", "subject", "age", "sex"), rep(1:3, each = 4))
  AnswerTests: omnitest(correctExpr = 'names(threecho) <- paste0(c("area", "subject", "age", "sex"), rep(1:3, each = 4))')

- Class: cmd_question
  Output: |-
    Now take a look at threecho again.
  CorrectAnswer: threecho
  AnswerTests: omnitest(correctExpr = 'threecho')

- Class: cmd_question
  Output: |-
    Pretty spiffy, eh?  Now let's turn to merging.  This is usually what
    you want to do instead of cbind because order is not what matters
    but the common variable between the two datasets.  Look at the head of
    another dataset you have available in this module: cholera_disease.
  CorrectAnswer: head(cholera_disease)
  AnswerTests: omnitest(correctExpr = 'head(cholera_disease)')

- Class: cmd_question
  Output: |-
    Since cholera_disease shares subject with cholera_merge you can put
    the two together like this:

    cmer <- merge(cholera_merge, cholera_disease)
  CorrectAnswer: cmer <- merge(cholera_merge, cholera_disease)
  AnswerTests: omnitest(correctExpr = 'cmer <- merge(cholera_merge, cholera_disease)')

- Class: cmd_question
  Output: |-
    Now check out the first 10 rows of cmer like this:

    head(cmer, 10)
  CorrectAnswer: head(cmer, 10)
  AnswerTests: omnitest(correctExpr = 'head(cmer, 10)')

- Class: cmd_question
  Output: |-
    R automatically determines the common columns if their names are the same,
    but what if they are not?  Let's change the names of cholera_disease so
    none match:

    names(cholera_disease) <- c("id", "disease")
  CorrectAnswer: names(cholera_disease) <- c("id", "disease")
  AnswerTests: omnitest(correctExpr = 'names(cholera_disease) <- c("id", "disease")')

- Class: cmd_question
  Output: |-
    And merge:

    cmer2 <- merge(cholera_merge, cholera_disease)
  CorrectAnswer: cmer2 <- merge(cholera_merge, cholera_disease)
  AnswerTests: omnitest(correctExpr = 'cmer2 <- merge(cholera_merge, cholera_disease)')

- Class: cmd_question
  Output: |-
    How many rows does cmer have?  (Not cmer2, but cmer.)
  CorrectAnswer: NROW(cmer)
  AnswerTests: omnitest(correctExpr = 'NROW(cmer)')
  Hint: NROW is the function you need.

- Class: cmd_question
  Output: |-
    That should make sense because cholera_merge had 25 rows and each one
    matched up with one in cholera_disease.  But how many rows does cmer2 have?
  CorrectAnswer: NROW(cmer2)
  AnswerTests: omnitest(correctExpr = 'NROW(cmer2)')

- Class: cmd_question
  Output: |-
    So what happened?  What is the square root of 625?
    Don't forget the square root
    function is sqrt()
  CorrectAnswer: sqrt(625)
  AnswerTests: omnitest(correctExpr = 'sqrt(625)')

- Class: cmd_question
  Output: |-
    What happened? Since there were no common columns R created the merge
    by combining every observation in the first data.frame with each
    observation in the second: 25x25=625.  Let's inform R what we want by using
    some optional arguments of merge (definitely take a look at merge's help
    at some point).  The first dataset used is "x" and the second is
    "y" in the naming convention of the merge function:

    NROW(merge(cholera_merge, cholera_disease, by.x = "subject", by.y = "id"))
  CorrectAnswer: NROW(merge(cholera_merge, cholera_disease, by.x = "subject", by.y = "id"))
  AnswerTests: omnitest(correctExpr = 'NROW(merge(cholera_merge, cholera_disease, by.x = "subject", by.y = "id"))')

- Class: cmd_question
  Output: |-
    Looks like we have the right merge again (you do, but I'll let you
    convince yourself later if you need too.)  What if instead all the rows
    are not in both datasets?  I have a small sample (only 5 rows) from the
    original cholera_disease dataset.  It's called cdsamp, examine it now.
  CorrectAnswer: cdsamp
  AnswerTests: omnitest(correctExpr = 'cdsamp')

- Class: cmd_question
  Output: |-
    Merge it with cholera_merge like this:

    merge(cholera_merge, cdsamp)
  CorrectAnswer: merge(cholera_merge, cdsamp)
  AnswerTests: omnitest(correctExpr = 'merge(cholera_merge, cdsamp)')

- Class: cmd_question
  Output: |-
    Holy disappearing rows, Batman! Merge only keeps the matches.
    Be careful with that fact and be sure to specify another option if
    you want to keep all the rows of one:

    (merall <- merge(cholera_merge, cdsamp, all.x = TRUE))
  CorrectAnswer: (merall <- merge(cholera_merge, cdsamp, all.x = TRUE))
  AnswerTests: omnitest(correctExpr = '(merall <- merge(cholera_merge, cdsamp, all.x = TRUE))')

- Class: text
  Output: |-
    All the rows from the "x" data.frame are there with missing data
    from the y one represented by NA. Most frequently you want to use one or
    both of the all options (all.x or all.y) which will save you a lot of
    heartache when you are merging datasets that you do not realize are
    incompatible somehow.

- Class: cmd_question
  Output: |-
    OK, next topic.  Sorting vectors and dataframes.  Sort a vector like this:

    sort(merall$age)
  CorrectAnswer: sort(merall$age)
  AnswerTests: omnitest(correctExpr = 'sort(merall$age)')

- Class: cmd_question
  Output: |-
    It is a little trickier if you want to reorder a data.frame by one of its
    variables.  For that you need the order function, try it:

    order(merall$age)
  CorrectAnswer: order(merall$age)
  AnswerTests: omnitest(correctExpr = 'order(merall$age)')

- Class: cmd_question
  Output: |-
    What in the world is going on here?  Look at merall$age and compare to the
    output you just got.
  CorrectAnswer: merall$age
  AnswerTests: omnitest(correctExpr = 'merall$age')

- Class: cmd_question
  Output: |-
    OK, what is the 2nd value of merall$age?  The 11th?  The 18th?
    The 6th?  Maybe you should write them down.
    Do you see how order tells
    you which values to take to sort merall$age?

    If fact, you can sort merall$age like this:

    merall$age[order(merall$age)]
  CorrectAnswer: merall$age[order(merall$age)]
  AnswerTests: omnitest(correctExpr = 'merall$age[order(merall$age)]')

- Class: cmd_question
  Output: |-
    order is more useful for data.frames where it can be used to sort the
    data.frame by one of its variables. Sort merall by age:

    merall[order(merall$age), ]
  CorrectAnswer: merall[order(merall$age), ]
  AnswerTests: omnitest(correctExpr = 'merall[order(merall$age), ]')

- Class: cmd_question
  Output: |-
    OK, last new topic - getting the first and last items of a vector or
    data.frame.  You've see head which gets the first values of a vector
    or the first rows of a data.frame.  It is 6 rows by default for a
    data.frame:

    head(merall)
  CorrectAnswer: head(merall)
  AnswerTests: omnitest(correctExpr = 'head(merall)')

- Class: cmd_question
  Output: |-
    Want more or less?  Use the second argument:

    head(merall, 10)
  CorrectAnswer: head(merall, 10)
  AnswerTests: omnitest(correctExpr = 'head(merall, 10)')

- Class: cmd_question
  Output: |-
    Tail works just like head but gives you the end rather than the top.

    tail(merall, 10)
  CorrectAnswer: tail(merall, 10)
  AnswerTests: omnitest(correctExpr = 'tail(merall, 10)')

- Class: cmd_question
  Output: |-
    You can use negative numbers to get "all but" from the relevant end.
    So with head you get all but the first so many rows.

    This will give you all but the first ten rows:

    head(merall, -15)
  CorrectAnswer: head(merall, -15)
  AnswerTests: omnitest(correctExpr = 'head(merall, -15)')

- Class: cmd_question
  Output: |-
    Tail again works like head - so this is the "last" rows except for
    the last 15:

    tail(merall, -15)
  CorrectAnswer: tail(merall, -15)
  AnswerTests: omnitest(correctExpr = 'tail(merall, -15)')

- Class: text
  Output: |-
    OK, that's a lot of review and new material!  You've done great.
    Time for a break!!!

- Class: mult_question
  Output: Respond Yes to submit your assignment to Canvas.
  AnswerChoices: Yes;Yes
  CorrectAnswer: Yes
  AnswerTests: submit_log(523542)
  Hint: Respond Yes.

- Class: text
  Output: |-
    Check to see that your submission was successful and there are no errors
    above. If your submission failed to
    submit automatically for any reason, please follow the instructions above.
    Ready for more?
